private static final String IMG_PATH = "C:/Users/hath8/wswhImages/";

==========================================================================================

<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
android:requestLegacyExternalStorage="true"

==========================================================================================

String filePath = IMG_PATH + storeFilename;

                            saveImageToExternalStorage(storeFilename);


                            /*ContentResolver resolver = requireContext().getContentResolver();
                            ContentValues values = new ContentValues();
                            values.put(MediaStore.Images.Media.DISPLAY_NAME, fileName);
                            values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg");

                            Uri parsedUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
                            Log.d("parsed Uri", parsedUri.toString());*/

//                          receivedImages.add(uri.toString());


==========================================================================================

 private Uri saveImageToExternalStorage(String imagePath) {
        // 이미지를 저장할 경로 설정
        String directory = "/storage/Download" + "/wswhImages";

        File storageDir = new File(directory);
        if (!storageDir.exists()) {
            storageDir.mkdirs();
        }
        // 이미지 파일 생성
        File imageFile = new File(directory, imagePath);
        Bitmap imageBitmap = BitmapFactory.decodeFile(imageFile.getAbsolutePath());
        Log.d("directory", directory + " file: " + imageFile + " bitmap : " + imageBitmap);

        try {
            FileOutputStream fos = new FileOutputStream(imageFile);
            imageBitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
            fos.flush();
            fos.close();
            // 이미지 파일의 Uri 생성
            Uri imageUri = Uri.fromFile(imageFile);
            Log.d("bitmap uri", imageUri.toString());
            return imageUri;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

==========================================================================================

     //어쨋든 이미지를 서버로 보낼 때 Uri로 보내서 서버에 잘 저장되고
            //받아올 때 URL + fileName 으로 받아와서  그럼 그 URL을 비트맵 형식으로 바꿔야하나? 아닌데 그냥 URL 받으면 된다했었는데
    //      https://stickode.tistory.com/382 >> url to bitmap, imageView에 적용
    //      사진은 list<string>으로 받아왔으니까
    //      사진 ReviewItems 랑 RecentReviewAdapter에서 set할때 잘 건드려바
    //      지금 어쨋든 adapter에서 content1, 2를 모두 bind 하기때문에
    //      bind할때 photos.get(1)같이 접근하면 2번째 사진이 없을 떄 널포인터가 터지겠지?
    //        그러면 이제 bind 할 때 사진 갯수를 파악해서 처리해야하나
    //        아니면 아래에 새로 만들 때 저렇게 처리해도 되나
    //        >> 이건 나중에 테스트 하보고
    //        >>>> 그냥 log에 warring으로만 뜨고 종료되진 않는구나
    //      지금 bind할때 log찍게 해놨으니까 받아지는 url 어떤식으로 받아지나 보고
    //      이거 서버 안되는것도 잘 모르겠네
    //      집노트북에서는 review 데이터가 안받아와

    //        그리고 reviewItem에서
    //        setContentImage1_1 / 2_1 둘다 만들어놨는데
    //        어쨋든 지금 서버에서 받아온 사진들은 list<String>에 넣어지니까
    //        저건 필요없고 bind할때 알아서 잘 받아오면 되나
